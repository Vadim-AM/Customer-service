{"uid":"555c24838408c236","name":"test_registration_negative[firefox-     -+53252253f3252]","fullName":"tests.ui_tests.test_auth_pages.TestRegisterPage#test_registration_negative","historyId":"7888558a05ab6f10f01f91a9d07cba52","time":{"start":1674631576982,"stop":1674631576982,"duration":0},"status":"broken","statusMessage":"sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) table user already exists\n[SQL: \nCREATE TABLE user (\n\tid INTEGER NOT NULL, \n\tusername VARCHAR(64), \n\tphone_number VARCHAR(120), \n\tpassword_hash VARCHAR(128), \n\tlast_seen VARCHAR, \n\tPRIMARY KEY (id)\n)\n\n]\n(Background on this error at: https://sqlalche.me/e/14/e3q8)","statusTrace":"self = <sqlalchemy.engine.base.Connection object at 0x7f1b3d437690>\ndialect = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7f1b3d4026d0>\nconstructor = <bound method DefaultExecutionContext._init_ddl of <class 'sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext'>>\nstatement = '\\nCREATE TABLE user (\\n\\tid INTEGER NOT NULL, \\n\\tusername VARCHAR(64), \\n\\tphone_number VARCHAR(120), \\n\\tpassword_hash VARCHAR(128), \\n\\tlast_seen VARCHAR, \\n\\tPRIMARY KEY (id)\\n)\\n\\n'\nparameters = (), execution_options = immutabledict({'autocommit': True})\nargs = (<sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1b3d042190>,)\nkw = {}, branched = <sqlalchemy.engine.base.Connection object at 0x7f1b3d437690>\nyp = None\nconn = <sqlalchemy.pool.base._ConnectionFairy object at 0x7f1b3eddbad0>\ncontext = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7f1b3d0c4a10>\ncursor = <sqlite3.Cursor object at 0x7f1b3d0365c0>, evt_handled = False\n\n    def _execute_context(\n        self,\n        dialect,\n        constructor,\n        statement,\n        parameters,\n        execution_options,\n        *args,\n        **kw\n    ):\n        \"\"\"Create an :class:`.ExecutionContext` and execute, returning\n        a :class:`_engine.CursorResult`.\"\"\"\n    \n        branched = self\n        if self.__branch_from:\n            # if this is a \"branched\" connection, do everything in terms\n            # of the \"root\" connection, *except* for .close(), which is\n            # the only feature that branching provides\n            self = self.__branch_from\n    \n        if execution_options:\n            yp = execution_options.get(\"yield_per\", None)\n            if yp:\n                execution_options = execution_options.union(\n                    {\"stream_results\": True, \"max_row_buffer\": yp}\n                )\n    \n        try:\n            conn = self._dbapi_connection\n            if conn is None:\n                conn = self._revalidate_connection()\n    \n            context = constructor(\n                dialect, self, conn, execution_options, *args, **kw\n            )\n        except (exc.PendingRollbackError, exc.ResourceClosedError):\n            raise\n        except BaseException as e:\n            self._handle_dbapi_exception(\n                e, util.text_type(statement), parameters, None, None\n            )\n    \n        if (\n            self._transaction\n            and not self._transaction.is_active\n            or (\n                self._nested_transaction\n                and not self._nested_transaction.is_active\n            )\n        ):\n            self._invalid_transaction()\n    \n        elif self._trans_context_manager:\n            TransactionalContext._trans_ctx_check(self)\n    \n        if self._is_future and self._transaction is None:\n            self._autobegin()\n    \n        context.pre_exec()\n    \n        if dialect.use_setinputsizes:\n            context._set_input_sizes()\n    \n        cursor, statement, parameters = (\n            context.cursor,\n            context.statement,\n            context.parameters,\n        )\n    \n        if not context.executemany:\n            parameters = parameters[0]\n    \n        if self._has_events or self.engine._has_events:\n            for fn in self.dispatch.before_cursor_execute:\n                statement, parameters = fn(\n                    self,\n                    cursor,\n                    statement,\n                    parameters,\n                    context,\n                    context.executemany,\n                )\n    \n        if self._echo:\n    \n            self._log_info(statement)\n    \n            stats = context._get_cache_stats()\n    \n            if not self.engine.hide_parameters:\n                self._log_info(\n                    \"[%s] %r\",\n                    stats,\n                    sql_util._repr_params(\n                        parameters, batches=10, ismulti=context.executemany\n                    ),\n                )\n            else:\n                self._log_info(\n                    \"[%s] [SQL parameters hidden due to hide_parameters=True]\"\n                    % (stats,)\n                )\n    \n        evt_handled = False\n        try:\n            if context.executemany:\n                if self.dialect._has_events:\n                    for fn in self.dialect.dispatch.do_executemany:\n                        if fn(cursor, statement, parameters, context):\n                            evt_handled = True\n                            break\n                if not evt_handled:\n                    self.dialect.do_executemany(\n                        cursor, statement, parameters, context\n                    )\n            elif not parameters and context.no_parameters:\n                if self.dialect._has_events:\n                    for fn in self.dialect.dispatch.do_execute_no_params:\n                        if fn(cursor, statement, context):\n                            evt_handled = True\n                            break\n                if not evt_handled:\n                    self.dialect.do_execute_no_params(\n                        cursor, statement, context\n                    )\n            else:\n                if self.dialect._has_events:\n                    for fn in self.dialect.dispatch.do_execute:\n                        if fn(cursor, statement, parameters, context):\n                            evt_handled = True\n                            break\n                if not evt_handled:\n>                   self.dialect.do_execute(\n                        cursor, statement, parameters, context\n                    )\n\n/opt/hostedtoolcache/Python/3.11.1/x64/lib/python3.11/site-packages/sqlalchemy/engine/base.py:1900: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7f1b3d4026d0>\ncursor = <sqlite3.Cursor object at 0x7f1b3d0365c0>\nstatement = '\\nCREATE TABLE user (\\n\\tid INTEGER NOT NULL, \\n\\tusername VARCHAR(64), \\n\\tphone_number VARCHAR(120), \\n\\tpassword_hash VARCHAR(128), \\n\\tlast_seen VARCHAR, \\n\\tPRIMARY KEY (id)\\n)\\n\\n'\nparameters = ()\ncontext = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7f1b3d0c4a10>\n\n    def do_execute(self, cursor, statement, parameters, context=None):\n>       cursor.execute(statement, parameters)\nE       sqlite3.OperationalError: table user already exists\n\n/opt/hostedtoolcache/Python/3.11.1/x64/lib/python3.11/site-packages/sqlalchemy/engine/default.py:736: OperationalError\n\nThe above exception was the direct cause of the following exception:\n\n    @pytest.fixture(scope='session')\n    def app():\n>       return create_app(TestConfig)\n\ntests/conftest.py:22: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napp/__init__.py:37: in create_app\n    db.create_all()\n/opt/hostedtoolcache/Python/3.11.1/x64/lib/python3.11/site-packages/flask_sqlalchemy/extension.py:868: in create_all\n    self._call_for_binds(bind_key, \"create_all\")\n/opt/hostedtoolcache/Python/3.11.1/x64/lib/python3.11/site-packages/flask_sqlalchemy/extension.py:849: in _call_for_binds\n    getattr(metadata, op_name)(bind=engine)\n/opt/hostedtoolcache/Python/3.11.1/x64/lib/python3.11/site-packages/sqlalchemy/sql/schema.py:4930: in create_all\n    bind._run_ddl_visitor(\n/opt/hostedtoolcache/Python/3.11.1/x64/lib/python3.11/site-packages/sqlalchemy/engine/base.py:3228: in _run_ddl_visitor\n    conn._run_ddl_visitor(visitorcallable, element, **kwargs)\n/opt/hostedtoolcache/Python/3.11.1/x64/lib/python3.11/site-packages/sqlalchemy/engine/base.py:2211: in _run_ddl_visitor\n    visitorcallable(self.dialect, self, **kwargs).traverse_single(element)\n/opt/hostedtoolcache/Python/3.11.1/x64/lib/python3.11/site-packages/sqlalchemy/sql/visitors.py:524: in traverse_single\n    return meth(obj, **kw)\n/opt/hostedtoolcache/Python/3.11.1/x64/lib/python3.11/site-packages/sqlalchemy/sql/ddl.py:851: in visit_metadata\n    self.traverse_single(\n/opt/hostedtoolcache/Python/3.11.1/x64/lib/python3.11/site-packages/sqlalchemy/sql/visitors.py:524: in traverse_single\n    return meth(obj, **kw)\n/opt/hostedtoolcache/Python/3.11.1/x64/lib/python3.11/site-packages/sqlalchemy/sql/ddl.py:895: in visit_table\n    self.connection.execute(\n/opt/hostedtoolcache/Python/3.11.1/x64/lib/python3.11/site-packages/sqlalchemy/engine/base.py:1380: in execute\n    return meth(self, multiparams, params, _EMPTY_EXECUTION_OPTS)\n/opt/hostedtoolcache/Python/3.11.1/x64/lib/python3.11/site-packages/sqlalchemy/sql/ddl.py:80: in _execute_on_connection\n    return connection._execute_ddl(\n/opt/hostedtoolcache/Python/3.11.1/x64/lib/python3.11/site-packages/sqlalchemy/engine/base.py:1472: in _execute_ddl\n    ret = self._execute_context(\n/opt/hostedtoolcache/Python/3.11.1/x64/lib/python3.11/site-packages/sqlalchemy/engine/base.py:1943: in _execute_context\n    self._handle_dbapi_exception(\n/opt/hostedtoolcache/Python/3.11.1/x64/lib/python3.11/site-packages/sqlalchemy/engine/base.py:2124: in _handle_dbapi_exception\n    util.raise_(\n/opt/hostedtoolcache/Python/3.11.1/x64/lib/python3.11/site-packages/sqlalchemy/util/compat.py:211: in raise_\n    raise exception\n/opt/hostedtoolcache/Python/3.11.1/x64/lib/python3.11/site-packages/sqlalchemy/engine/base.py:1900: in _execute_context\n    self.dialect.do_execute(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7f1b3d4026d0>\ncursor = <sqlite3.Cursor object at 0x7f1b3d0365c0>\nstatement = '\\nCREATE TABLE user (\\n\\tid INTEGER NOT NULL, \\n\\tusername VARCHAR(64), \\n\\tphone_number VARCHAR(120), \\n\\tpassword_hash VARCHAR(128), \\n\\tlast_seen VARCHAR, \\n\\tPRIMARY KEY (id)\\n)\\n\\n'\nparameters = ()\ncontext = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7f1b3d0c4a10>\n\n    def do_execute(self, cursor, statement, parameters, context=None):\n>       cursor.execute(statement, parameters)\nE       sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) table user already exists\nE       [SQL: \nE       CREATE TABLE user (\nE       \tid INTEGER NOT NULL, \nE       \tusername VARCHAR(64), \nE       \tphone_number VARCHAR(120), \nE       \tpassword_hash VARCHAR(128), \nE       \tlast_seen VARCHAR, \nE       \tPRIMARY KEY (id)\nE       )\nE       \nE       ]\nE       (Background on this error at: https://sqlalche.me/e/14/e3q8)\n\n/opt/hostedtoolcache/Python/3.11.1/x64/lib/python3.11/site-packages/sqlalchemy/engine/default.py:736: OperationalError","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"app","time":{"start":1674631556624,"stop":1674631556655,"duration":31},"status":"broken","statusMessage":"sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) table user already exists\n[SQL: \nCREATE TABLE user (\n\tid INTEGER NOT NULL, \n\tusername VARCHAR(64), \n\tphone_number VARCHAR(120), \n\tpassword_hash VARCHAR(128), \n\tlast_seen VARCHAR, \n\tPRIMARY KEY (id)\n)\n\n]\n(Background on this error at: https://sqlalche.me/e/14/e3q8)\n","statusTrace":"  File \"/opt/hostedtoolcache/Python/3.11.1/x64/lib/python3.11/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n          ^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.11.1/x64/lib/python3.11/site-packages/_pytest/fixtures.py\", line 1129, in pytest_fixture_setup\n    result = call_fixture_func(fixturefunc, request, kwargs)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.11.1/x64/lib/python3.11/site-packages/_pytest/fixtures.py\", line 908, in call_fixture_func\n    fixture_result = fixturefunc(**kwargs)\n                     ^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/work/Customer-service/Customer-service/tests/conftest.py\", line 22, in app\n    return create_app(TestConfig)\n           ^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/work/Customer-service/Customer-service/app/__init__.py\", line 37, in create_app\n    db.create_all()\n  File \"/opt/hostedtoolcache/Python/3.11.1/x64/lib/python3.11/site-packages/flask_sqlalchemy/extension.py\", line 868, in create_all\n    self._call_for_binds(bind_key, \"create_all\")\n  File \"/opt/hostedtoolcache/Python/3.11.1/x64/lib/python3.11/site-packages/flask_sqlalchemy/extension.py\", line 849, in _call_for_binds\n    getattr(metadata, op_name)(bind=engine)\n  File \"/opt/hostedtoolcache/Python/3.11.1/x64/lib/python3.11/site-packages/sqlalchemy/sql/schema.py\", line 4930, in create_all\n    bind._run_ddl_visitor(\n  File \"/opt/hostedtoolcache/Python/3.11.1/x64/lib/python3.11/site-packages/sqlalchemy/engine/base.py\", line 3228, in _run_ddl_visitor\n    conn._run_ddl_visitor(visitorcallable, element, **kwargs)\n  File \"/opt/hostedtoolcache/Python/3.11.1/x64/lib/python3.11/site-packages/sqlalchemy/engine/base.py\", line 2211, in _run_ddl_visitor\n    visitorcallable(self.dialect, self, **kwargs).traverse_single(element)\n  File \"/opt/hostedtoolcache/Python/3.11.1/x64/lib/python3.11/site-packages/sqlalchemy/sql/visitors.py\", line 524, in traverse_single\n    return meth(obj, **kw)\n           ^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.11.1/x64/lib/python3.11/site-packages/sqlalchemy/sql/ddl.py\", line 851, in visit_metadata\n    self.traverse_single(\n  File \"/opt/hostedtoolcache/Python/3.11.1/x64/lib/python3.11/site-packages/sqlalchemy/sql/visitors.py\", line 524, in traverse_single\n    return meth(obj, **kw)\n           ^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.11.1/x64/lib/python3.11/site-packages/sqlalchemy/sql/ddl.py\", line 895, in visit_table\n    self.connection.execute(\n  File \"/opt/hostedtoolcache/Python/3.11.1/x64/lib/python3.11/site-packages/sqlalchemy/engine/base.py\", line 1380, in execute\n    return meth(self, multiparams, params, _EMPTY_EXECUTION_OPTS)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.11.1/x64/lib/python3.11/site-packages/sqlalchemy/sql/ddl.py\", line 80, in _execute_on_connection\n    return connection._execute_ddl(\n           ^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.11.1/x64/lib/python3.11/site-packages/sqlalchemy/engine/base.py\", line 1472, in _execute_ddl\n    ret = self._execute_context(\n          ^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.11.1/x64/lib/python3.11/site-packages/sqlalchemy/engine/base.py\", line 1943, in _execute_context\n    self._handle_dbapi_exception(\n  File \"/opt/hostedtoolcache/Python/3.11.1/x64/lib/python3.11/site-packages/sqlalchemy/engine/base.py\", line 2124, in _handle_dbapi_exception\n    util.raise_(\n  File \"/opt/hostedtoolcache/Python/3.11.1/x64/lib/python3.11/site-packages/sqlalchemy/util/compat.py\", line 211, in raise_\n    raise exception\n  File \"/opt/hostedtoolcache/Python/3.11.1/x64/lib/python3.11/site-packages/sqlalchemy/engine/base.py\", line 1900, in _execute_context\n    self.dialect.do_execute(\n  File \"/opt/hostedtoolcache/Python/3.11.1/x64/lib/python3.11/site-packages/sqlalchemy/engine/default.py\", line 736, in do_execute\n    cursor.execute(statement, parameters)\n","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":true,"hasContent":true}],"afterStages":[],"labels":[{"name":"parentSuite","value":"tests.ui_tests"},{"name":"suite","value":"test_auth_pages"},{"name":"subSuite","value":"TestRegisterPage"},{"name":"host","value":"fv-az358-532"},{"name":"thread","value":"2327-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.ui_tests.test_auth_pages"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"browser","value":"'firefox'"},{"name":"name","value":"'     '"},{"name":"phone","value":"'+53252253f3252'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":1,"skipped":0,"passed":2,"unknown":0,"total":3},"items":[{"uid":"60cecd78d340f900","reportUrl":"https://Vadim-AM.github.io/Customer-service/35//#testresult/60cecd78d340f900","status":"passed","time":{"start":1674630759194,"stop":1674630759883,"duration":689}},{"uid":"fd62b5284fc9a2a0","reportUrl":"https://Vadim-AM.github.io/Customer-service/34//#testresult/fd62b5284fc9a2a0","status":"passed","time":{"start":1674591729658,"stop":1674591730254,"duration":596}}]},"tags":[]},"source":"555c24838408c236.json","parameterValues":["'firefox'","'     '","'+53252253f3252'"]}